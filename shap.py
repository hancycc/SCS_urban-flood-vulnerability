import matplotlib
import shap
from matplotlib import pyplot as plt
from matplotlib.colors import ListedColormap
from sklearn.ensemble import RandomForestRegressor



explainer = shap.TreeExplainer(RFModel)
shap_values = explainer.shap_values(X)
shap_values_all = explainer(x)

# 任选一段颜色
cmap = plt.get_cmap('YlOrRd')
# 创建一个从 'summer_r' 颜色梯度的 0.1 位置开始到 1 的颜色列表
colors = cmap(np.linspace(0.2, 1, 256))
# 使用颜色列表创建新的颜色梯度 'summer_r_plus'
summer_r_plus = matplotlib.colors.LinearSegmentedColormap.from_list('summer_r_plus', colors)
plt.figure()
shap.plots.beeswarm(shap_values_all, color=summer_r_plus)
plt.show()

# # 单点依赖图
shap.plots.waterfall(shap_values[2456143])

# # 全局重要性图
# plt.figure()
# shap.summary_plot(shap_values, X_train, plot_type="bar")
# plt.savefig('shap_all_bar.png')  # 将图保存为文件
# plt.show()  # 显示图形窗口

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")


